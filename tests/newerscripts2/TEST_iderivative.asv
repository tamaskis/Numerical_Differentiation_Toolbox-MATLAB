%% TEST_iderivative.m
% Numerical Differentiation Toolbox
%
% Unit testing of the iderivative function.
%
% Copyright © 2021 Tamas Kis
% Last Update: 2022-10-29
% Website: https://tamaskis.github.io
% Contact: tamas.a.kis@outlook.com
%
% DEPENDENCIES:
%   • Simple Unit Testing Toolbox (https://github.com/tamaskis/Simple_Unit_Testing_Toolbox-MATLAB)
%   • Numerical Differentiation Toolbox (https://www.mathworks.com/matlabcentral/fileexchange/97267-numerical-differentiation-toolbox)



%% SCRIPT SETUP

% clears Workspace and closes all figures
clear; close all;

% decimal places of precision
n = 14;



%% DERIVATIVE FUNCTIONS

% TODO: COMPLEXIFIED, DIFFERENT n's
% min, max, complexified in separate test?
% trig functions in degrees
% ge

% loads derivatives
load_derivatives;



%% FUNCTIONS THAT WILL RESULT IN ERRORS

% absolute value (x0 > 0 and x0 < 0) --> FIX IN NEXT SECTION TODO
TEST_NOT_EQUAL(d_abs_cs(-1),-1,[],'iderivative abs, x₀ < 0');
TEST_NOT_EQUAL(d_abs_cs(1),1,[],'iderivative abs, x₀ > 0');

% inverse trigonometric functions (x0 < -1) --> NO FIX
x0 = -1.5;
TEST_NOT_EQUAL(d_acsc_cs(x0),d_acsc(x0),[],'iderivative acsc, x₀ < -1');
TEST_NOT_EQUAL(d_asec_cs(x0),d_asec(x0),[],'iderivative asec, x₀ < -1');

% inverse hyperbolic functions (0 < x0 < 1) --> NO FIX
x0 = 0.5;
TEST_NOT_EQUAL(d_acoth_cs(x0),d_acoth(x0),[],'iderivative acoth, 0 < x₀ < 1');

% inverse hyperbolic functions (x0 > 1) --> NO FIX
x0 = 1.5;
TEST_NOT_EQUAL(d_atanh_cs(x0),d_atanh(x0),[],'iderivative atanh, x₀ > 1');

% inverse hyperbolic functions (-1 < x0 < 0) --> NO FIX
x0 = -0.5;
TEST_NOT_EQUAL(d_asech_cs(x0),d_asech(x0),[],'iderivative asech, -1 < x₀ < 0');
TEST_NOT_EQUAL(d_acoth_cs(x0),d_acoth(x0),[],'iderivative acoth, -1 < x₀ < 0');

% inverse hyperbolic functions (x0 < -1) --> NO FIX
x0 = -1.5;
TEST_NOT_EQUAL(d_acosh_cs(x0),d_acosh(x0),[],'iderivative acosh, x₀ < -1');
TEST_NOT_EQUAL(d_atanh_cs(x0),d_atanh(x0),[],'iderivative atanh, x₀ < -1');



%% COMPLEXIFIED FUNCTIONS TO ADDRESS ERRORS FROM PREVIOUS SECTION

% absolute value (x0 > 0 and x0 < 0)
TEST_EQUAL(d_iabs_cs(-1),d_iabs(-1),[],'iderivative iabs, x₀ < 0');
TEST_EQUAL(d_iabs_cs(1),d_iabs(1),[],'iderivative iabs, x₀ > 0');



%% SQUARE ROOT

% x0 < 1
x0 = 0.5;
TEST_EQUAL(d_sqrt_cs(x0),d_sqrt(x0),[],'iderivative sqrt, x₀ < 1');

% x0 = 1
x0 = 1;
TEST_EQUAL(d_sqrt_cs(x0),d_sqrt(x0),[],'iderivative sqrt, x₀ = 1');

% x0 > 1
x0 = 1.5;
TEST_EQUAL(d_sqrt_cs(x0),d_sqrt(x0),[],'iderivative sqrt, x₀ > 1');



%% EXPONENTIAL/POWER FUNCTIONS

% base for power
b = 5;

% x0 > 0
x0 = 1;
TEST_EQUAL(d_exp_cs(x0),d_exp(x0),[],'iderivative exp, x₀ > 0');
TEST_EQUAL(d_power_cs(x0,b),d_power(x0,b),[],'iderivative power, x₀ > 0');

% x0 = 0
x0 = 0;
TEST_EQUAL(d_exp_cs(x0),d_exp(x0),[],'iderivative exp, x₀ = 0');
TEST_EQUAL(d_power_cs(x0,b),d_power(x0,b),[],'iderivative power, x₀ = 0');

% x0 < 0
x0 = -1;
TEST_EQUAL(d_exp_cs(x0),d_exp(x0),[],'iderivative exp, x₀ < 0');
TEST_EQUAL(d_power_cs(x0,b),d_power(x0,b),[],'iderivative power, x₀ < 0');



%% LOGARITHMIC FUNCTIONS

% 0 < x0 < 1
x0 = 0.5;
TEST_EQUAL(d_log_cs(x0),d_log(x0),[],'iderivative log, 0 < x₀ < 1');
TEST_EQUAL(d_log10_cs(x0),d_log10(x0),[],'iderivative log10, 0 < x₀ < 1');

% x0 = 1
x0 = 1;
TEST_EQUAL(d_log_cs(x0),d_log(x0),[],'iderivative log, x₀ = 1');
TEST_EQUAL(d_log10_cs(x0),d_log10(x0),[],'iderivative log10, x₀ = 1');

% x0 > 1
x0 = 1.5;
TEST_EQUAL(d_log_cs(x0),d_log(x0),[],'iderivative log, x₀ > 1');
TEST_EQUAL(d_log10_cs(x0),d_log10(x0),[],'iderivative log10, x₀ > 1');



%% TRIGONOMETRIC FUNCTIONS

% sin
TEST_EQUAL(d_sin_cs(0),d_sin(0),[],'iderivative sin, x₀ = 0');
TEST_EQUAL(d_sin_cs(pi/4),d_sin(pi/4),[],'iderivative sin, 0 < x₀ < π/2');
TEST_EQUAL(d_sin_cs(pi/2),d_sin(pi/2),[],'iderivative sin, x₀ = π/2');
TEST_EQUAL(d_sin_cs(3*pi/4),d_sin(3*pi/4),[],'iderivative sin, π/2 < x₀ < π');
TEST_EQUAL(d_sin_cs(pi),d_sin(pi),[],'iderivative sin, x₀ = π');
TEST_EQUAL(d_sin_cs(5*pi/4),d_sin(5*pi/4),[],'iderivative sin, π < x₀ < 3π/2');
TEST_EQUAL(d_sin_cs(3*pi/2),d_sin(3*pi/2),[],'iderivative sin, x₀ = 3π/2');
TEST_EQUAL(d_sin_cs(7*pi/4),d_sin(7*pi/4),[],'iderivative sin, 3π/2 < x₀ < 2π');
TEST_EQUAL(d_sin_cs(2*pi),d_sin(2*pi),[],'iderivative sin, x₀ = 2π');

% cos
TEST_EQUAL(d_cos_cs(0),d_cos(0),[],'iderivative cos, x₀ = 0');
TEST_EQUAL(d_cos_cs(pi/4),d_cos(pi/4),[],'iderivative cos, 0 < x₀ < π/2');
TEST_EQUAL(d_cos_cs(pi/2),d_cos(pi/2),[],'iderivative cos, x₀ = π/2');
TEST_EQUAL(d_cos_cs(3*pi/4),d_cos(3*pi/4),[],'iderivative cos, π/2 < x₀ < π');
TEST_EQUAL(d_cos_cs(pi),d_cos(pi),[],'iderivative cos, x₀ = π');
TEST_EQUAL(d_cos_cs(5*pi/4),d_cos(5*pi/4),[],'iderivative cos, π < x₀ < 3π/2');
TEST_EQUAL(d_cos_cs(3*pi/2),d_cos(3*pi/2),[],'iderivative cos, x₀ = 3π/2');
TEST_EQUAL(d_cos_cs(7*pi/4),d_cos(7*pi/4),[],'iderivative cos, 3π/2 < x₀ < 2π');
TEST_EQUAL(d_cos_cs(2*pi),d_cos(2*pi),[],'iderivative cos, x₀ = 2π');

% tan
TEST_EQUAL(d_tan_cs(0),d_tan(0),[],'iderivative tan, x₀ = 0');
TEST_EQUAL(d_tan_cs(pi/4),d_tan(pi/4),[],'iderivative tan, 0 < x₀ < π/2');
TEST_EQUAL(d_tan_cs(pi/2),d_tan(pi/2),[],'iderivative tan, x₀ = π/2');
TEST_EQUAL(d_tan_cs(3*pi/4),d_tan(3*pi/4),[],'iderivative tan, π/2 < x₀ < π');
TEST_EQUAL(d_tan_cs(pi),d_tan(pi),[],'iderivative tan, x₀ = π');
TEST_EQUAL(d_tan_cs(5*pi/4),d_tan(5*pi/4),[],'iderivative tan, π < x₀ < 3π/2');
TEST_EQUAL(d_tan_cs(3*pi/2),d_tan(3*pi/2),[],'iderivative tan, x₀ = 3π/2');
TEST_EQUAL(d_tan_cs(7*pi/4),d_tan(7*pi/4),[],'iderivative tan, 3π/2 < x₀ < 2π');
TEST_EQUAL(d_tan_cs(2*pi),d_tan(2*pi),[],'iderivative tan, x₀ = 2π');

% csc
TEST_EQUAL(d_csc_cs(0),d_csc(0),[],'iderivative csc, x₀ = 0');
TEST_EQUAL(d_csc_cs(pi/4),d_csc(pi/4),[],'iderivative csc, 0 < x₀ < π/2');
TEST_EQUAL(d_csc_cs(pi/2),d_csc(pi/2),[],'iderivative csc, x₀ = π/2');
TEST_EQUAL(d_csc_cs(3*pi/4),d_csc(3*pi/4),[],'iderivative csc, π/2 < x₀ < π');
TEST_EQUAL(d_csc_cs(pi),d_csc(pi),[],'iderivative csc, x₀ = π');
TEST_EQUAL(d_csc_cs(5*pi/4),d_csc(5*pi/4),[],'iderivative csc, π < x₀ < 3π/2');
TEST_EQUAL(d_csc_cs(3*pi/2),d_csc(3*pi/2),[],'iderivative csc, x₀ = 3π/2');
TEST_EQUAL(d_csc_cs(7*pi/4),d_csc(7*pi/4),[],'iderivative csc, 3π/2 < x₀ < 2π');
TEST_EQUAL(d_csc_cs(2*pi),d_csc(2*pi),[],'iderivative csc, x₀ = 2π');

% sec
TEST_EQUAL(d_sec_cs(0),d_sec(0),[],'iderivative sec, x₀ = 0');
TEST_EQUAL(d_sec_cs(pi/4),d_sec(pi/4),[],'iderivative sec, 0 < x₀ < π/2');
TEST_EQUAL(d_sec_cs(pi/2),d_sec(pi/2),[],'iderivative sec, x₀ = π/2');
TEST_EQUAL(d_sec_cs(3*pi/4),d_sec(3*pi/4),[],'iderivative sec, π/2 < x₀ < π');
TEST_EQUAL(d_sec_cs(pi),d_sec(pi),[],'iderivative sec, x₀ = π');
TEST_EQUAL(d_sec_cs(5*pi/4),d_sec(5*pi/4),[],'iderivative sec, π < x₀ < 3π/2');
TEST_EQUAL(d_sec_cs(3*pi/2),d_sec(3*pi/2),[],'iderivative sec, x₀ = 3π/2');
TEST_EQUAL(d_sec_cs(7*pi/4),d_sec(7*pi/4),[],'iderivative sec, 3π/2 < x₀ < 2π');
TEST_EQUAL(d_sec_cs(2*pi),d_sec(2*pi),[],'iderivative sec, x₀ = 2π');

% cot
TEST_EQUAL(d_cot_cs(0),d_cot(0),[],'iderivative cot, x₀ = 0');
TEST_EQUAL(d_cot_cs(pi/4),d_cot(pi/4),[],'iderivative cot, 0 < x₀ < π/2');
TEST_EQUAL(d_cot_cs(pi/2),d_cot(pi/2),[],'iderivative cot, x₀ = π/2');
TEST_EQUAL(d_cot_cs(3*pi/4),d_cot(3*pi/4),[],'iderivative cot, π/2 < x₀ < π');
TEST_EQUAL(d_cot_cs(pi),d_cot(pi),[],'iderivative cot, x₀ = π');
TEST_EQUAL(d_cot_cs(5*pi/4),d_cot(5*pi/4),[],'iderivative cot, π < x₀ < 3π/2');
TEST_EQUAL(d_cot_cs(3*pi/2),d_cot(3*pi/2),[],'iderivative cot, x₀ = 3π/2');
TEST_EQUAL(d_cot_cs(7*pi/4),d_cot(7*pi/4),[],'iderivative cot, 3π/2 < x₀ < 2π');
TEST_EQUAL(d_cot_cs(2*pi),d_cot(2*pi),[],'iderivative cot, x₀ = 2π');



%% INVERSE TRIGONOMETRIC FUNCTIONS

% asin
TEST_EQUAL(d_asin_cs(-1.5),d_asin(-1.5),[],'iderivative asin, x₀ < -1');
TEST_EQUAL(d_asin_cs(-1),d_asin(-1),[],'iderivative asin, x₀ = -1');
TEST_EQUAL(d_asin_cs(-0.5),d_asin(-0.5),[],'iderivative asin, -1 < x₀ < 0');
TEST_EQUAL(d_asin_cs(0),d_asin(0),[],'iderivative asin, x₀ = 0');
TEST_EQUAL(d_asin_cs(0.5),d_asin(0.5),[],'iderivative asin, 0 < x₀ < 1');
TEST_EQUAL(d_asin_cs(1),d_asin(1),[],'iderivative asin, x₀ = 1');
TEST_EQUAL(d_asin_cs(1.5),d_asin(1.5),[],'iderivative asin, x₀ > 1');

% acos
TEST_EQUAL(d_acos_cs(-1.5),d_acos(-1.5),[],'iderivative acos, x₀ < -1');
TEST_EQUAL(d_acos_cs(-1),d_acos(-1),[],'iderivative acos, x₀ = -1');
TEST_EQUAL(d_acos_cs(-0.5),d_acos(-0.5),[],'iderivative acos, -1 < x₀ < 0');
TEST_EQUAL(d_acos_cs(0),d_acos(0),[],'iderivative acos, x₀ = 0');
TEST_EQUAL(d_acos_cs(0.5),d_acos(0.5),[],'iderivative acos, 0 < x₀ < 1');
TEST_EQUAL(d_acos_cs(1),d_acos(1),[],'iderivative acos, x₀ = 1');
TEST_EQUAL(d_acos_cs(1.5),d_acos(1.5),[],'iderivative acos, x₀ > 1');

% atan
TEST_EQUAL(d_atan_cs(-1.5),d_atan(-1.5),[],'iderivative atan, x₀ < -1');
TEST_EQUAL(d_atan_cs(-1),d_atan(-1),[],'iderivative atan, x₀ = -1');
TEST_EQUAL(d_atan_cs(-0.5),d_atan(-0.5),[],'iderivative atan, -1 < x₀ < 0');
TEST_EQUAL(d_atan_cs(0),d_atan(0),[],'iderivative atan, x₀ = 0');
TEST_EQUAL(d_atan_cs(0.5),d_atan(0.5),[],'iderivative atan, 0 < x₀ < 1');
TEST_EQUAL(d_atan_cs(1),d_atan(1),[],'iderivative atan, x₀ = 1');
TEST_EQUAL(d_atan_cs(1.5),d_atan(1.5),[],'iderivative atan, x₀ > 1');

% acsc
TEST_EQUAL(d_acsc_cs(-1.5),d_acsc(-1.5),[],'iderivative acsc, x₀ < -1');
TEST_EQUAL(d_acsc_cs(-1),d_acsc(-1),[],'iderivative acsc, x₀ = -1');
TEST_EQUAL(d_acsc_cs(-0.5),d_acsc(-0.5),[],'iderivative acsc, -1 < x₀ < 0');
TEST_EQUAL(d_acsc_cs(0),d_acsc(0),[],'iderivative acsc, x₀ = 0');
TEST_EQUAL(d_acsc_cs(0.5),d_acsc(0.5),[],'iderivative acsc, 0 < x₀ < 1');
TEST_EQUAL(d_acsc_cs(1),d_acsc(1),[],'iderivative acsc, x₀ = 1');
TEST_EQUAL(d_acsc_cs(1.5),d_acsc(1.5),[],'iderivative acsc, x₀ > 1');

% asec
TEST_EQUAL(d_asec_cs(-1.5),d_asec(-1.5),[],'iderivative asec, x₀ < -1');
TEST_EQUAL(d_asec_cs(-1),d_asec(-1),[],'iderivative asec, x₀ = -1');
TEST_EQUAL(d_asec_cs(-0.5),d_asec(-0.5),[],'iderivative asec, -1 < x₀ < 0');
TEST_EQUAL(d_asec_cs(0),d_asec(0),[],'iderivative asec, x₀ = 0');
TEST_EQUAL(d_asec_cs(0.5),d_asec(0.5),[],'iderivative asec, 0 < x₀ < 1');
TEST_EQUAL(d_asec_cs(1),d_asec(1),[],'iderivative asec, x₀ = 1');
TEST_EQUAL(d_asec_cs(1.5),d_asec(1.5),[],'iderivative asec, x₀ > 1');

% acot
TEST_EQUAL(d_acot_cs(-1.5),d_acot(-1.5),[],'iderivative acot, x₀ < -1');
TEST_EQUAL(d_acot_cs(-1),d_acot(-1),[],'iderivative acot, x₀ = -1');
TEST_EQUAL(d_acot_cs(-0.5),d_acot(-0.5),[],'iderivative acot, -1 < x₀ < 0');
TEST_EQUAL(d_acot_cs(0),d_acot(0),[],'iderivative acot, x₀ = 0');
TEST_EQUAL(d_acot_cs(0.5),d_acot(0.5),[],'iderivative acot, 0 < x₀ < 1');
TEST_EQUAL(d_acot_cs(1),d_acot(1),[],'iderivative acot, x₀ = 1');
TEST_EQUAL(d_acot_cs(1.5),d_acot(1.5),[],'iderivative acot, x₀ > 1');



%% HYPERBOLIC FUNCTIONS

% positive argument
x0 = 1;
TEST_EQUAL(d_sinh_cs(x0),d_sinh(x0));
TEST_EQUAL(d_cosh_cs(x0),d_cosh(x0));
TEST_EQUAL(d_tanh_cs(x0),d_tanh(x0));
TEST_EQUAL(d_csch_cs(x0),d_csch(x0));
TEST_EQUAL(d_sech_cs(x0),d_sech(x0));
TEST_EQUAL(d_coth_cs(x0),d_coth(x0));

% negative argument
x0 = -1;
TEST_EQUAL(d_sinh_cs(x0),d_sinh(x0));
TEST_EQUAL(d_cosh_cs(x0),d_cosh(x0));
TEST_EQUAL(d_tanh_cs(x0),d_tanh(x0));
TEST_EQUAL(d_csch_cs(x0),d_csch(x0));
TEST_EQUAL(d_sech_cs(x0),d_sech(x0));
TEST_EQUAL(d_coth_cs(x0),d_coth(x0));



%% INVERSE HYPERBOLIC FUNCTIONS

% 0 < x0 < 1
x0 = 0.5;
TEST_EQUAL(d_asinh_cs(x0),d_asinh(x0));
TEST_EQUAL(d_atanh_cs(x0),d_atanh(x0));
TEST_EQUAL(d_acsch_cs(x0),d_acsch(x0));
TEST_EQUAL(d_asech_cs(x0),d_asech(x0));

% x0 > 1
x0 = 1.5;
TEST_EQUAL(d_asinh_cs(x0),d_asinh(x0));
TEST_EQUAL(d_acosh_cs(x0),d_acosh(x0));
TEST_EQUAL(d_acsch_cs(x0),d_acsch(x0));
TEST_EQUAL(d_acoth_cs(x0),d_acoth(x0));

% -1 < x0 < 0
x0 = -0.5;
TEST_EQUAL(d_asinh_cs(x0),d_asinh(x0));
TEST_EQUAL(d_atanh_cs(x0),d_atanh(x0));
TEST_EQUAL(d_acsch_cs(x0),d_acsch(x0));

% x0 < -1
x0 = -1.5;
TEST_EQUAL(d_asinh_cs(x0),d_asinh(x0));
TEST_EQUAL(d_acsch_cs(x0),d_acsch(x0));
TEST_EQUAL(d_acoth_cs(x0),d_acoth(x0));



%% PRINTS SUCCESS MESSAGE

fprintf("All tests in TEST_iderivative.m passed.\n")



%% AUXILIARY FUNCTIONS

function d_abs = d_abs_func(x)
    if x > 0
        d_abs = 1;
    elseif x < 0
        d_abs = -1;
    else
        d_abs = nan;
    end
end